<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="Allergene" xml:space="preserve">
    <value>Ingredients</value>
  </data>
  <data name="AnfrageWirt" xml:space="preserve">
    <value>Send to the host at the same time as a non-binding request</value>
  </data>
  <data name="Getränke" xml:space="preserve">
    <value>Drinks</value>
  </data>
  <data name="Impressum" xml:space="preserve">
    <value>Imprint</value>
  </data>
  <data name="Kontakt" xml:space="preserve">
    <value>Contact</value>
  </data>
  <data name="Login" xml:space="preserve">
    <value>Login</value>
  </data>
  <data name="Mittagstisch" xml:space="preserve">
    <value>Midday meal</value>
  </data>
  <data name="Planersumme" xml:space="preserve">
    <value>Sum</value>
  </data>
  <data name="Raeumlichkeiten" xml:space="preserve">
    <value>Premises</value>
  </data>
  <data name="Reservierung" xml:space="preserve">
    <value>Reservation</value>
  </data>
  <data name="Speisekarte" xml:space="preserve">
    <value>Bill of fare</value>
  </data>
  <data name="Speisen" xml:space="preserve">
    <value>Food</value>
  </data>
  <data name="UeberUns" xml:space="preserve">
    <value>About us</value>
  </data>
  <data name="Veranstaltungsplaner" xml:space="preserve">
    <value>Event planning</value>
  </data>
  <data name="Zusammenfassung" xml:space="preserve">
    <value>Recapitulation</value>
  </data>
  <data name="Öffnungszeiten" xml:space="preserve">
    <value>Opening hours</value>
  </data>
  <data name="Insgesamt" xml:space="preserve">
    <value>overall</value>
  </data>
  <data name="AlertMail" xml:space="preserve">
    <value>It must be a valid email address.</value>
  </data>
  <data name="AlertPersonenzahl" xml:space="preserve">
    <value>Please enter a number of people in the form above.</value>
  </data>
  <data name="AlertTelefon" xml:space="preserve">
    <value>Please only enter digits.</value>
  </data>
  <data name="BtnPdfErstellenText" xml:space="preserve">
    <value>Create a PDF</value>
  </data>
  <data name="DsvgoText" xml:space="preserve">
    <value>I agree that my details will be used to respond to my request. My data is not stored in any database, it is only printed on the PDF document that is sent to the organizer.</value>
  </data>
  <data name="Email" xml:space="preserve">
    <value>mail adress</value>
  </data>
  <data name="PdfAnsprache" xml:space="preserve">
    <value>Thank you for your interest in our house. We will get in touch with you as soon as possible.</value>
  </data>
  <data name="Personen" xml:space="preserve">
    <value>people</value>
  </data>
  <data name="PlanderPdfHeader" xml:space="preserve">
    <value>Your selection</value>
  </data>
  <data name="PlanerBeschreibung" xml:space="preserve">
    <value>With this service you can calculate the expected costs for an event and print out the result. If you want, you can also send your calculation to the host. Then we ask for a few details to be able to contact you.</value>
  </data>
  <data name="PlanerIntro" xml:space="preserve">
    <value>Please enter the number of people for whom you are planning an event with us. Please first enter the number of people for whom you want to plan an event with us.</value>
  </data>
  <data name="PlanerPdfName" xml:space="preserve">
    <value>Name</value>
  </data>
  <data name="PlanerPdfTelefon" xml:space="preserve">
    <value>Phone number</value>
  </data>
  <data name="PlanerPdfTermin" xml:space="preserve">
    <value>Scheduled appointment</value>
  </data>
  <data name="Dienstag" xml:space="preserve">
    <value>Tuesday</value>
  </data>
  <data name="Donnerstag" xml:space="preserve">
    <value>Thursday</value>
  </data>
  <data name="Freitag" xml:space="preserve">
    <value>Friday</value>
  </data>
  <data name="Mittwoch" xml:space="preserve">
    <value>Wednesday</value>
  </data>
  <data name="Montag" xml:space="preserve">
    <value>Monday</value>
  </data>
  <data name="Ruhetag" xml:space="preserve">
    <value>Day off</value>
  </data>
  <data name="Samstag" xml:space="preserve">
    <value>Saturday</value>
  </data>
  <data name="Sonntag" xml:space="preserve">
    <value>Sunday</value>
  </data>
  <data name="Restaurant" xml:space="preserve">
    <value>Restaurant</value>
  </data>
  <data name="durchgehend" xml:space="preserve">
    <value>continuous</value>
  </data>
  <data name="Uhr" xml:space="preserve">
    <value>o'clock</value>
  </data>
  <data name="und" xml:space="preserve">
    <value>and</value>
  </data>
  <data name="von" xml:space="preserve">
    <value>from</value>
  </data>
</root>